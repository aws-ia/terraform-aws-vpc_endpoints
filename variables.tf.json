{
  "variable": {
    "enable_all_endpoints": {
      "type": "bool",
      "default": "false",
      "description": "setting this to true enables all endpoints provided by this module with default settings."
    },
    "vpc_id": {
      "type": "string",
      "description": "ID for the VPC that endpoints will be deployed into"
    },
    "route_table_ids": {
      "type": "list(string)",
      "default": [],
      "description": "One or more route table IDs. Only applicable for endpoints of type Gateway"
    },
    "subnet_ids": {
      "type": "list(string)",
      "default": [],
      "description": "The ID of one or more subnets in which to create a network interface for endpoints. Only applicable for endpoints of type GatewayLoadBalancer and Interface."
    },
    "security_group_ids": {
      "type": "list(string)",
      "default": [],
      "description": "The ID of one or more security groups to associate with the endpoint's network interface. Required for endpoints of type Interface."
    },
    "private_dns_enabled": {
      "type": "bool",
      "default": false,
      "description": "Whether or not to associate a private hosted zone with the specified VPC. Only applicable for endpoints of type Interface."
    },
    "tags": {
      "type": "map(string)",
      "default": {},
      "description": "A map of tags to assign to the endpoints. If configured with a provider default_tags configuration block present, tags with matching keys will overwrite those defined at the module-level."
    },
    "gateway_endpoint_policies": {
      "type": "map(map(any))",
      "default": {},
      "description": "Policies to apply to gateway endpoints, the key must match the endpoint name used in the \"enabled_endpoints\" variable, policies declared for endpoints that are not enabled will be ignored.",
      "validation": {
        "condition": "${[for k, v in var.gateway_endpoint_policies: k] == [] ? true : can([for s in [for k, v in var.gateway_endpoint_policies: k] : regex(\"||$dynamodb^||$s3^\", s)])}",
        "error_message": "Endpoint names can only contain one or more of the following ['dynamodb', 's3']."
      }
    },
    "interface_endpoint_policies": {
      "type": "map(map(any))",
      "default": {},
      "description": "Policies to apply to interface endpoints, the key must match the endpoint name used in the \"enabled_endpoints\" variable, policies declared for endpoints that are not enabled will be ignored.",
      "validation": {
        "condition": "${[for k, v in var.interface_endpoint_policies: k] == [] ? true : can([for s in [for k, v in var.interface_endpoint_policies: k] : regex(\"||$access-analyzer^||$acm-pca^||$airflow_api^||$airflow_env^||$airflow_ops^||$app-integrations^||$application-autoscaling^||$appmesh-envoy-management^||$apprunner^||$appstream_api^||$appstream_streaming^||$aps-workspaces^||$athena^||$auditmanager^||$autoscaling^||$autoscaling-plans^||$awsconnector^||$braket^||$cassandra^||$cassandra-fips^||$clouddirectory^||$cloudformation^||$cloudhsmv2^||$cloudtrail^||$codeartifact_api^||$codeartifact_repositories^||$codebuild^||$codebuild-fips^||$codecommit^||$codecommit-fips^||$codedeploy^||$codedeploy-commands-secure^||$codeguru-profiler^||$codeguru-reviewer^||$codepipeline^||$codestar-connections_api^||$comprehend^||$comprehendmedical^||$config^||$databrew^||$dataexchange^||$datasync^||$devops-guru^||$dms^||$dms-fips^||$ebs^||$ec2^||$ec2messages^||$ecr_api^||$ecr_dkr^||$ecs^||$ecs-agent^||$ecs-telemetry^||$elastic-inference_runtime^||$elasticbeanstalk^||$elasticbeanstalk-health^||$elasticfilesystem^||$elasticfilesystem-fips^||$elasticloadbalancing^||$elasticmapreduce^||$email-smtp^||$emr-containers^||$events^||$execute-api^||$finspace^||$finspace-api^||$fis^||$frauddetector^||$git-codecommit^||$git-codecommit-fips^||$glue^||$greengrass^||$groundstation^||$healthlake^||$imagebuilder^||$iot_data^||$iotsitewise_api^||$iotsitewise_data^||$iotwireless_api^||$kendra^||$kinesis-firehose^||$kinesis-streams^||$kms^||$lambda^||$license-manager^||$license-manager-fips^||$logs^||$lookoutequipment^||$lookoutmetrics^||$lookoutvision^||$lorawan_cups^||$lorawan_lns^||$macie2^||$mgn^||$monitoring^||$nimble^||$profile^||$proton^||$qldb_session^||$rds^||$rds-data^||$redshift^||$redshift-data^||$redshift-fips^||$rekognition^||$rekognition-fips^||$s3^||$s3-global_accesspoint^||$sagemaker_api^||$sagemaker_featurestore-runtime^||$sagemaker_runtime^||$sagemaker_runtime-fips^||$sagemaker_us-east-1_notebook^||$sagemaker_us-east-1_studio^||$secretsmanager^||$servicecatalog^||$servicecatalog-appregistry^||$sms^||$sms-fips^||$snow-device-management^||$sns^||$sqs^||$ssm^||$ssmmessages^||$states^||$storagegateway^||$sts^||$synthetics^||$textract^||$textract-fips^||$transcribe^||$transcribestreaming^||$transfer^||$transfer_server^||$workspaces^||$xray^\", s)])}",
        "error_message": "Endpoint names can only contain one or more of the following ['access-analyzer', 'acm-pca', 'airflow_api', 'airflow_env', 'airflow_ops', 'app-integrations', 'application-autoscaling', 'appmesh-envoy-management', 'apprunner', 'appstream_api', 'appstream_streaming', 'aps-workspaces', 'athena', 'auditmanager', 'autoscaling', 'autoscaling-plans', 'awsconnector', 'braket', 'cassandra', 'cassandra-fips', 'clouddirectory', 'cloudformation', 'cloudhsmv2', 'cloudtrail', 'codeartifact_api', 'codeartifact_repositories', 'codebuild', 'codebuild-fips', 'codecommit', 'codecommit-fips', 'codedeploy', 'codedeploy-commands-secure', 'codeguru-profiler', 'codeguru-reviewer', 'codepipeline', 'codestar-connections_api', 'comprehend', 'comprehendmedical', 'config', 'databrew', 'dataexchange', 'datasync', 'devops-guru', 'dms', 'dms-fips', 'ebs', 'ec2', 'ec2messages', 'ecr_api', 'ecr_dkr', 'ecs', 'ecs-agent', 'ecs-telemetry', 'elastic-inference_runtime', 'elasticbeanstalk', 'elasticbeanstalk-health', 'elasticfilesystem', 'elasticfilesystem-fips', 'elasticloadbalancing', 'elasticmapreduce', 'email-smtp', 'emr-containers', 'events', 'execute-api', 'finspace', 'finspace-api', 'fis', 'frauddetector', 'git-codecommit', 'git-codecommit-fips', 'glue', 'greengrass', 'groundstation', 'healthlake', 'imagebuilder', 'iot_data', 'iotsitewise_api', 'iotsitewise_data', 'iotwireless_api', 'kendra', 'kinesis-firehose', 'kinesis-streams', 'kms', 'lambda', 'license-manager', 'license-manager-fips', 'logs', 'lookoutequipment', 'lookoutmetrics', 'lookoutvision', 'lorawan_cups', 'lorawan_lns', 'macie2', 'mgn', 'monitoring', 'nimble', 'profile', 'proton', 'qldb_session', 'rds', 'rds-data', 'redshift', 'redshift-data', 'redshift-fips', 'rekognition', 'rekognition-fips', 's3', 's3-global_accesspoint', 'sagemaker_api', 'sagemaker_featurestore-runtime', 'sagemaker_runtime', 'sagemaker_runtime-fips', 'sagemaker_us-east-1_notebook', 'sagemaker_us-east-1_studio', 'secretsmanager', 'servicecatalog', 'servicecatalog-appregistry', 'sms', 'sms-fips', 'snow-device-management', 'sns', 'sqs', 'ssm', 'ssmmessages', 'states', 'storagegateway', 'sts', 'synthetics', 'textract', 'textract-fips', 'transcribe', 'transcribestreaming', 'transfer', 'transfer_server', 'workspaces', 'xray']."
      }
    },
    "enabled_interface_endpoints": {
      "type": "list(string)",
      "default": [],
      "description": "List of shortened interface endpoint names that are to be enabled. Shortened names are the endpoint name excluding the dns style prefix, so \"com.amazonaws.us-east-1.s3\" would be entered as \"s3\". The region will be pulled from your provider configuration.Available endpoints:access-analyzer, acm-pca, airflow_api, airflow_env, airflow_ops, app-integrations, application-autoscaling, appmesh-envoy-management, apprunner, appstream_api, appstream_streaming, aps-workspaces, athena, auditmanager, autoscaling, autoscaling-plans, awsconnector, braket, cassandra, cassandra-fips, clouddirectory, cloudformation, cloudhsmv2, cloudtrail, codeartifact_api, codeartifact_repositories, codebuild, codebuild-fips, codecommit, codecommit-fips, codedeploy, codedeploy-commands-secure, codeguru-profiler, codeguru-reviewer, codepipeline, codestar-connections_api, comprehend, comprehendmedical, config, databrew, dataexchange, datasync, devops-guru, dms, dms-fips, ebs, ec2, ec2messages, ecr_api, ecr_dkr, ecs, ecs-agent, ecs-telemetry, elastic-inference_runtime, elasticbeanstalk, elasticbeanstalk-health, elasticfilesystem, elasticfilesystem-fips, elasticloadbalancing, elasticmapreduce, email-smtp, emr-containers, events, execute-api, finspace, finspace-api, fis, frauddetector, git-codecommit, git-codecommit-fips, glue, greengrass, groundstation, healthlake, imagebuilder, iot_data, iotsitewise_api, iotsitewise_data, iotwireless_api, kendra, kinesis-firehose, kinesis-streams, kms, lambda, license-manager, license-manager-fips, logs, lookoutequipment, lookoutmetrics, lookoutvision, lorawan_cups, lorawan_lns, macie2, mgn, monitoring, nimble, profile, proton, qldb_session, rds, rds-data, redshift, redshift-data, redshift-fips, rekognition, rekognition-fips, s3, s3-global_accesspoint, sagemaker_api, sagemaker_featurestore-runtime, sagemaker_runtime, sagemaker_runtime-fips, sagemaker_us-east-1_notebook, sagemaker_us-east-1_studio, secretsmanager, servicecatalog, servicecatalog-appregistry, sms, sms-fips, snow-device-management, sns, sqs, ssm, ssmmessages, states, storagegateway, sts, synthetics, textract, textract-fips, transcribe, transcribestreaming, transfer, transfer_server, workspaces, xray",
      "validation": {
        "condition": "${var.enabled_interface_endpoints == [] ? true : can([for s in var.enabled_interface_endpoints : regex(\"||$access-analyzer^||$acm-pca^||$airflow_api^||$airflow_env^||$airflow_ops^||$app-integrations^||$application-autoscaling^||$appmesh-envoy-management^||$apprunner^||$appstream_api^||$appstream_streaming^||$aps-workspaces^||$athena^||$auditmanager^||$autoscaling^||$autoscaling-plans^||$awsconnector^||$braket^||$cassandra^||$cassandra-fips^||$clouddirectory^||$cloudformation^||$cloudhsmv2^||$cloudtrail^||$codeartifact_api^||$codeartifact_repositories^||$codebuild^||$codebuild-fips^||$codecommit^||$codecommit-fips^||$codedeploy^||$codedeploy-commands-secure^||$codeguru-profiler^||$codeguru-reviewer^||$codepipeline^||$codestar-connections_api^||$comprehend^||$comprehendmedical^||$config^||$databrew^||$dataexchange^||$datasync^||$devops-guru^||$dms^||$dms-fips^||$ebs^||$ec2^||$ec2messages^||$ecr_api^||$ecr_dkr^||$ecs^||$ecs-agent^||$ecs-telemetry^||$elastic-inference_runtime^||$elasticbeanstalk^||$elasticbeanstalk-health^||$elasticfilesystem^||$elasticfilesystem-fips^||$elasticloadbalancing^||$elasticmapreduce^||$email-smtp^||$emr-containers^||$events^||$execute-api^||$finspace^||$finspace-api^||$fis^||$frauddetector^||$git-codecommit^||$git-codecommit-fips^||$glue^||$greengrass^||$groundstation^||$healthlake^||$imagebuilder^||$iot_data^||$iotsitewise_api^||$iotsitewise_data^||$iotwireless_api^||$kendra^||$kinesis-firehose^||$kinesis-streams^||$kms^||$lambda^||$license-manager^||$license-manager-fips^||$logs^||$lookoutequipment^||$lookoutmetrics^||$lookoutvision^||$lorawan_cups^||$lorawan_lns^||$macie2^||$mgn^||$monitoring^||$nimble^||$profile^||$proton^||$qldb_session^||$rds^||$rds-data^||$redshift^||$redshift-data^||$redshift-fips^||$rekognition^||$rekognition-fips^||$s3^||$s3-global_accesspoint^||$sagemaker_api^||$sagemaker_featurestore-runtime^||$sagemaker_runtime^||$sagemaker_runtime-fips^||$sagemaker_us-east-1_notebook^||$sagemaker_us-east-1_studio^||$secretsmanager^||$servicecatalog^||$servicecatalog-appregistry^||$sms^||$sms-fips^||$snow-device-management^||$sns^||$sqs^||$ssm^||$ssmmessages^||$states^||$storagegateway^||$sts^||$synthetics^||$textract^||$textract-fips^||$transcribe^||$transcribestreaming^||$transfer^||$transfer_server^||$workspaces^||$xray^\", s)])}",
        "error_message": "Endpoint names can only contain one or more of the following ['access-analyzer', 'acm-pca', 'airflow_api', 'airflow_env', 'airflow_ops', 'app-integrations', 'application-autoscaling', 'appmesh-envoy-management', 'apprunner', 'appstream_api', 'appstream_streaming', 'aps-workspaces', 'athena', 'auditmanager', 'autoscaling', 'autoscaling-plans', 'awsconnector', 'braket', 'cassandra', 'cassandra-fips', 'clouddirectory', 'cloudformation', 'cloudhsmv2', 'cloudtrail', 'codeartifact_api', 'codeartifact_repositories', 'codebuild', 'codebuild-fips', 'codecommit', 'codecommit-fips', 'codedeploy', 'codedeploy-commands-secure', 'codeguru-profiler', 'codeguru-reviewer', 'codepipeline', 'codestar-connections_api', 'comprehend', 'comprehendmedical', 'config', 'databrew', 'dataexchange', 'datasync', 'devops-guru', 'dms', 'dms-fips', 'ebs', 'ec2', 'ec2messages', 'ecr_api', 'ecr_dkr', 'ecs', 'ecs-agent', 'ecs-telemetry', 'elastic-inference_runtime', 'elasticbeanstalk', 'elasticbeanstalk-health', 'elasticfilesystem', 'elasticfilesystem-fips', 'elasticloadbalancing', 'elasticmapreduce', 'email-smtp', 'emr-containers', 'events', 'execute-api', 'finspace', 'finspace-api', 'fis', 'frauddetector', 'git-codecommit', 'git-codecommit-fips', 'glue', 'greengrass', 'groundstation', 'healthlake', 'imagebuilder', 'iot_data', 'iotsitewise_api', 'iotsitewise_data', 'iotwireless_api', 'kendra', 'kinesis-firehose', 'kinesis-streams', 'kms', 'lambda', 'license-manager', 'license-manager-fips', 'logs', 'lookoutequipment', 'lookoutmetrics', 'lookoutvision', 'lorawan_cups', 'lorawan_lns', 'macie2', 'mgn', 'monitoring', 'nimble', 'profile', 'proton', 'qldb_session', 'rds', 'rds-data', 'redshift', 'redshift-data', 'redshift-fips', 'rekognition', 'rekognition-fips', 's3', 's3-global_accesspoint', 'sagemaker_api', 'sagemaker_featurestore-runtime', 'sagemaker_runtime', 'sagemaker_runtime-fips', 'sagemaker_us-east-1_notebook', 'sagemaker_us-east-1_studio', 'secretsmanager', 'servicecatalog', 'servicecatalog-appregistry', 'sms', 'sms-fips', 'snow-device-management', 'sns', 'sqs', 'ssm', 'ssmmessages', 'states', 'storagegateway', 'sts', 'synthetics', 'textract', 'textract-fips', 'transcribe', 'transcribestreaming', 'transfer', 'transfer_server', 'workspaces', 'xray']."
      }
    },
    "enabled_gateway_endpoints": {
      "type": "list(string)",
      "default": [],
      "description": "List of shortened gateway endpoint names that are to be enabled. Shortened names are the endpoint name excluding the dns style prefix, so \"com.amazonaws.us-east-1.s3\" would be entered as \"s3\". The region will be pulled from your provider configuration.Available endpoints:dynamodb, s3",
      "validation": {
        "condition": "${var.enabled_gateway_endpoints == [] ? true : can([for s in var.enabled_gateway_endpoints : regex(\"||$dynamodb^||$s3^\", s)])}",
        "error_message": "Endpoint names can only contain one or more of the following ['dynamodb', 's3']."
      }
    }
  }
}