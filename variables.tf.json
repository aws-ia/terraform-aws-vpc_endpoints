{
  "variable": {
    "enable_all_endpoints": {
      "type": "bool",
      "default": "false",
      "description": "setting this to true enables all endpoints provided by this module with default settings."
    },
    "vpc_id": {
      "type": "string",
      "description": "ID for the VPC that endpoints will be deployed into"
    },
    "route_table_ids": {
      "type": "list(string)",
      "default": [],
      "description": "One or more route table IDs. Only applicable for endpoints of type Gateway"
    },
    "subnet_ids": {
      "type": "list(string)",
      "default": [],
      "description": "The ID of one or more subnets in which to create a network interface for endpoints. Only applicable for endpoints of type GatewayLoadBalancer and Interface."
    },
    "security_group_ids": {
      "type": "list(string)",
      "default": [],
      "description": "The ID of one or more security groups to associate with the endpoint's network interface. Required for endpoints of type Interface."
    },
    "private_dns_enabled": {
      "type": "bool",
      "default": false,
      "description": "Whether or not to associate a private hosted zone with the specified VPC. Only applicable for endpoints of type Interface."
    },
    "tags": {
      "type": "map(string)",
      "default": {},
      "description": "A map of tags to assign to the endpoints. If configured with a provider default_tags configuration block present, tags with matching keys will overwrite those defined at the module-level."
    },
    "gateway_endpoint_policies": {
      "type": "map(map(any))",
      "default": {},
      "description": "Policies to apply to gateway endpoints, the key must match the endpoint name used in the \"enabled_endpoints\" variable, policies declared for endpoints that are not enabled will be ignored.",
      "validation": {
        "condition": "${[for k, v in var.gateway_endpoint_policies: k] == [] ? true : can([for s in [for k, v in var.gateway_endpoint_policies: k] : regex(\"||$s3^||$dynamodb^\", s)])}",
        "error_message": "Endpoint names can only contain one or more of the following ['dynamodb', 's3']."
      }
    },
    "interface_endpoint_policies": {
      "type": "map(map(any))",
      "default": {},
      "description": "Policies to apply to interface endpoints, the key must match the endpoint name used in the \"enabled_endpoints\" variable, policies declared for endpoints that are not enabled will be ignored.",
      "validation": {
        "condition": "${[for k, v in var.interface_endpoint_policies: k] == [] ? true : can([for s in [for k, v in var.interface_endpoint_policies: k] : regex(\"||$codebuild^||$iotwireless_api^||$devops-guru^||$finspace-api^||$fis^||$nimble^||$codebuild-fips^||$frauddetector^||$finspace^||$iotsitewise_api^||$appmesh-envoy-management^||$sagemaker_notebook^||$comprehendmedical^||$codecommit^||$app-integrations^||$cassandra-fips^||$redshift-data^||$emr-containers^||$airflow_ops^||$databrew^||$rds^||$codedeploy-commands-secure^||$macie2^||$kms^||$rekognition-fips^||$lambda^||$autoscaling^||$lookoutvision^||$dms-fips^||$sts^||$transcribestreaming^||$profile^||$clouddirectory^||$s3^||$lookoutmetrics^||$elasticfilesystem-fips^||$ecs-telemetry^||$autoscaling-plans^||$rekognition^||$access-analyzer^||$transfer_server^||$snow-device-management^||$textract-fips^||$license-manager^||$kendra^||$qldb_session^||$sagemaker_runtime-fips^||$redshift^||$codecommit-fips^||$datasync^||$secretsmanager^||$ecs-agent^||$apprunner^||$kinesis-streams^||$logs^||$codeguru-reviewer^||$groundstation^||$codeartifact_repositories^||$sms-fips^||$iotsitewise_data^||$lorawan_cups^||$elastic-inference_runtime^||$workspaces^||$s3-global_accesspoint^||$imagebuilder^||$transcribe^||$ssm^||$sagemaker_studio^||$redshift-fips^||$sqs^||$lorawan_lns^||$codeartifact_api^||$aps-workspaces^||$rds-data^||$cassandra^||$athena^||$codeguru-profiler^||$synthetics^||$ssmmessages^||$cloudformation^||$appstream_streaming^||$git-codecommit^||$dms^||$elasticbeanstalk-health^||$airflow_env^||$ebs^||$elasticmapreduce^||$email-smtp^||$monitoring^||$ecr_api^||$proton^||$braket^||$config^||$sms^||$ec2messages^||$mgn^||$textract^||$servicecatalog^||$awsconnector^||$sns^||$ecs^||$auditmanager^||$codepipeline^||$comprehend^||$codestar-connections_api^||$dataexchange^||$elasticloadbalancing^||$application-autoscaling^||$execute-api^||$storagegateway^||$cloudtrail^||$sagemaker_runtime^||$cloudhsmv2^||$ec2^||$events^||$kinesis-firehose^||$ecr_dkr^||$transfer^||$elasticbeanstalk^||$airflow_api^||$sagemaker_featurestore-runtime^||$sagemaker_api^||$healthlake^||$iot_data^||$codedeploy^||$states^||$appstream_api^||$git-codecommit-fips^||$greengrass^||$elasticfilesystem^||$lookoutequipment^||$acm-pca^||$glue^||$xray^||$servicecatalog-appregistry^||$license-manager-fips^\", s)])}",
        "error_message": "Endpoint names can only contain one or more of the following ['access-analyzer', 'acm-pca', 'airflow_api', 'airflow_env', 'airflow_ops', 'app-integrations', 'application-autoscaling', 'appmesh-envoy-management', 'apprunner', 'appstream_api', 'appstream_streaming', 'aps-workspaces', 'athena', 'auditmanager', 'autoscaling', 'autoscaling-plans', 'awsconnector', 'braket', 'cassandra', 'cassandra-fips', 'clouddirectory', 'cloudformation', 'cloudhsmv2', 'cloudtrail', 'codeartifact_api', 'codeartifact_repositories', 'codebuild', 'codebuild-fips', 'codecommit', 'codecommit-fips', 'codedeploy', 'codedeploy-commands-secure', 'codeguru-profiler', 'codeguru-reviewer', 'codepipeline', 'codestar-connections_api', 'comprehend', 'comprehendmedical', 'config', 'databrew', 'dataexchange', 'datasync', 'devops-guru', 'dms', 'dms-fips', 'ebs', 'ec2', 'ec2messages', 'ecr_api', 'ecr_dkr', 'ecs', 'ecs-agent', 'ecs-telemetry', 'elastic-inference_runtime', 'elasticbeanstalk', 'elasticbeanstalk-health', 'elasticfilesystem', 'elasticfilesystem-fips', 'elasticloadbalancing', 'elasticmapreduce', 'email-smtp', 'emr-containers', 'events', 'execute-api', 'finspace', 'finspace-api', 'fis', 'frauddetector', 'git-codecommit', 'git-codecommit-fips', 'glue', 'greengrass', 'groundstation', 'healthlake', 'imagebuilder', 'iot_data', 'iotsitewise_api', 'iotsitewise_data', 'iotwireless_api', 'kendra', 'kinesis-firehose', 'kinesis-streams', 'kms', 'lambda', 'license-manager', 'license-manager-fips', 'logs', 'lookoutequipment', 'lookoutmetrics', 'lookoutvision', 'lorawan_cups', 'lorawan_lns', 'macie2', 'mgn', 'monitoring', 'nimble', 'profile', 'proton', 'qldb_session', 'rds', 'rds-data', 'redshift', 'redshift-data', 'redshift-fips', 'rekognition', 'rekognition-fips', 's3', 's3-global_accesspoint', 'sagemaker_api', 'sagemaker_featurestore-runtime', 'sagemaker_notebook', 'sagemaker_runtime', 'sagemaker_runtime-fips', 'sagemaker_studio', 'secretsmanager', 'servicecatalog', 'servicecatalog-appregistry', 'sms', 'sms-fips', 'snow-device-management', 'sns', 'sqs', 'ssm', 'ssmmessages', 'states', 'storagegateway', 'sts', 'synthetics', 'textract', 'textract-fips', 'transcribe', 'transcribestreaming', 'transfer', 'transfer_server', 'workspaces', 'xray']."
      }
    },
    "enabled_interface_endpoints": {
      "type": "list(string)",
      "default": [],
      "description": "List of shortened interface endpoint names that are to be enabled. Shortened names are the endpoint name excluding the dns style prefix, so \"com.amazonaws.us-east-1.s3\" would be entered as \"s3\", the region will be pulled from your provider configuration.\n\nAvailable endpoints:\n* access-analyzer\n* acm-pca\n* airflow_api\n* airflow_env\n* airflow_ops\n* app-integrations\n* application-autoscaling\n* appmesh-envoy-management\n* apprunner\n* appstream_api\n* appstream_streaming\n* aps-workspaces\n* athena\n* auditmanager\n* autoscaling\n* autoscaling-plans\n* awsconnector\n* braket\n* cassandra\n* cassandra-fips\n* clouddirectory\n* cloudformation\n* cloudhsmv2\n* cloudtrail\n* codeartifact_api\n* codeartifact_repositories\n* codebuild\n* codebuild-fips\n* codecommit\n* codecommit-fips\n* codedeploy\n* codedeploy-commands-secure\n* codeguru-profiler\n* codeguru-reviewer\n* codepipeline\n* codestar-connections_api\n* comprehend\n* comprehendmedical\n* config\n* databrew\n* dataexchange\n* datasync\n* devops-guru\n* dms\n* dms-fips\n* ebs\n* ec2\n* ec2messages\n* ecr_api\n* ecr_dkr\n* ecs\n* ecs-agent\n* ecs-telemetry\n* elastic-inference_runtime\n* elasticbeanstalk\n* elasticbeanstalk-health\n* elasticfilesystem\n* elasticfilesystem-fips\n* elasticloadbalancing\n* elasticmapreduce\n* email-smtp\n* emr-containers\n* events\n* execute-api\n* finspace\n* finspace-api\n* fis\n* frauddetector\n* git-codecommit\n* git-codecommit-fips\n* glue\n* greengrass\n* groundstation\n* healthlake\n* imagebuilder\n* iot_data\n* iotsitewise_api\n* iotsitewise_data\n* iotwireless_api\n* kendra\n* kinesis-firehose\n* kinesis-streams\n* kms\n* lambda\n* license-manager\n* license-manager-fips\n* logs\n* lookoutequipment\n* lookoutmetrics\n* lookoutvision\n* lorawan_cups\n* lorawan_lns\n* macie2\n* mgn\n* monitoring\n* nimble\n* profile\n* proton\n* qldb_session\n* rds\n* rds-data\n* redshift\n* redshift-data\n* redshift-fips\n* rekognition\n* rekognition-fips\n* s3\n* s3-global_accesspoint\n* sagemaker_api\n* sagemaker_featurestore-runtime\n* sagemaker_notebook\n* sagemaker_runtime\n* sagemaker_runtime-fips\n* sagemaker_studio\n* secretsmanager\n* servicecatalog\n* servicecatalog-appregistry\n* sms\n* sms-fips\n* snow-device-management\n* sns\n* sqs\n* ssm\n* ssmmessages\n* states\n* storagegateway\n* sts\n* synthetics\n* textract\n* textract-fips\n* transcribe\n* transcribestreaming\n* transfer\n* transfer_server\n* workspaces\n* xray",
      "validation": {
        "condition": "${var.enabled_interface_endpoints == [] ? true : can([for s in var.enabled_interface_endpoints : regex(\"||$codebuild^||$iotwireless_api^||$devops-guru^||$finspace-api^||$fis^||$nimble^||$codebuild-fips^||$frauddetector^||$finspace^||$iotsitewise_api^||$appmesh-envoy-management^||$sagemaker_notebook^||$comprehendmedical^||$codecommit^||$app-integrations^||$cassandra-fips^||$redshift-data^||$emr-containers^||$airflow_ops^||$databrew^||$rds^||$codedeploy-commands-secure^||$macie2^||$kms^||$rekognition-fips^||$lambda^||$autoscaling^||$lookoutvision^||$dms-fips^||$sts^||$transcribestreaming^||$profile^||$clouddirectory^||$s3^||$lookoutmetrics^||$elasticfilesystem-fips^||$ecs-telemetry^||$autoscaling-plans^||$rekognition^||$access-analyzer^||$transfer_server^||$snow-device-management^||$textract-fips^||$license-manager^||$kendra^||$qldb_session^||$sagemaker_runtime-fips^||$redshift^||$codecommit-fips^||$datasync^||$secretsmanager^||$ecs-agent^||$apprunner^||$kinesis-streams^||$logs^||$codeguru-reviewer^||$groundstation^||$codeartifact_repositories^||$sms-fips^||$iotsitewise_data^||$lorawan_cups^||$elastic-inference_runtime^||$workspaces^||$s3-global_accesspoint^||$imagebuilder^||$transcribe^||$ssm^||$sagemaker_studio^||$redshift-fips^||$sqs^||$lorawan_lns^||$codeartifact_api^||$aps-workspaces^||$rds-data^||$cassandra^||$athena^||$codeguru-profiler^||$synthetics^||$ssmmessages^||$cloudformation^||$appstream_streaming^||$git-codecommit^||$dms^||$elasticbeanstalk-health^||$airflow_env^||$ebs^||$elasticmapreduce^||$email-smtp^||$monitoring^||$ecr_api^||$proton^||$braket^||$config^||$sms^||$ec2messages^||$mgn^||$textract^||$servicecatalog^||$awsconnector^||$sns^||$ecs^||$auditmanager^||$codepipeline^||$comprehend^||$codestar-connections_api^||$dataexchange^||$elasticloadbalancing^||$application-autoscaling^||$execute-api^||$storagegateway^||$cloudtrail^||$sagemaker_runtime^||$cloudhsmv2^||$ec2^||$events^||$kinesis-firehose^||$ecr_dkr^||$transfer^||$elasticbeanstalk^||$airflow_api^||$sagemaker_featurestore-runtime^||$sagemaker_api^||$healthlake^||$iot_data^||$codedeploy^||$states^||$appstream_api^||$git-codecommit-fips^||$greengrass^||$elasticfilesystem^||$lookoutequipment^||$acm-pca^||$glue^||$xray^||$servicecatalog-appregistry^||$license-manager-fips^\", s)])}",
        "error_message": "Endpoint names can only contain one or more of the following ['access-analyzer', 'acm-pca', 'airflow_api', 'airflow_env', 'airflow_ops', 'app-integrations', 'application-autoscaling', 'appmesh-envoy-management', 'apprunner', 'appstream_api', 'appstream_streaming', 'aps-workspaces', 'athena', 'auditmanager', 'autoscaling', 'autoscaling-plans', 'awsconnector', 'braket', 'cassandra', 'cassandra-fips', 'clouddirectory', 'cloudformation', 'cloudhsmv2', 'cloudtrail', 'codeartifact_api', 'codeartifact_repositories', 'codebuild', 'codebuild-fips', 'codecommit', 'codecommit-fips', 'codedeploy', 'codedeploy-commands-secure', 'codeguru-profiler', 'codeguru-reviewer', 'codepipeline', 'codestar-connections_api', 'comprehend', 'comprehendmedical', 'config', 'databrew', 'dataexchange', 'datasync', 'devops-guru', 'dms', 'dms-fips', 'ebs', 'ec2', 'ec2messages', 'ecr_api', 'ecr_dkr', 'ecs', 'ecs-agent', 'ecs-telemetry', 'elastic-inference_runtime', 'elasticbeanstalk', 'elasticbeanstalk-health', 'elasticfilesystem', 'elasticfilesystem-fips', 'elasticloadbalancing', 'elasticmapreduce', 'email-smtp', 'emr-containers', 'events', 'execute-api', 'finspace', 'finspace-api', 'fis', 'frauddetector', 'git-codecommit', 'git-codecommit-fips', 'glue', 'greengrass', 'groundstation', 'healthlake', 'imagebuilder', 'iot_data', 'iotsitewise_api', 'iotsitewise_data', 'iotwireless_api', 'kendra', 'kinesis-firehose', 'kinesis-streams', 'kms', 'lambda', 'license-manager', 'license-manager-fips', 'logs', 'lookoutequipment', 'lookoutmetrics', 'lookoutvision', 'lorawan_cups', 'lorawan_lns', 'macie2', 'mgn', 'monitoring', 'nimble', 'profile', 'proton', 'qldb_session', 'rds', 'rds-data', 'redshift', 'redshift-data', 'redshift-fips', 'rekognition', 'rekognition-fips', 's3', 's3-global_accesspoint', 'sagemaker_api', 'sagemaker_featurestore-runtime', 'sagemaker_notebook', 'sagemaker_runtime', 'sagemaker_runtime-fips', 'sagemaker_studio', 'secretsmanager', 'servicecatalog', 'servicecatalog-appregistry', 'sms', 'sms-fips', 'snow-device-management', 'sns', 'sqs', 'ssm', 'ssmmessages', 'states', 'storagegateway', 'sts', 'synthetics', 'textract', 'textract-fips', 'transcribe', 'transcribestreaming', 'transfer', 'transfer_server', 'workspaces', 'xray']."
      }
    },
    "enabled_gateway_endpoints": {
      "type": "list(string)",
      "default": [],
      "description": "List of shortened gateway endpoint names that are to be enabled. Shortened names are the endpoint name excluding the dns style prefix, so \"com.amazonaws.us-east-1.s3\" would be entered as \"s3\", the region will be pulled from your provider configuration.\n\nAvailable endpoints:\n* dynamodb\n* s3",
      "validation": {
        "condition": "${var.enabled_gateway_endpoints == [] ? true : can([for s in var.enabled_gateway_endpoints : regex(\"||$s3^||$dynamodb^\", s)])}",
        "error_message": "Endpoint names can only contain one or more of the following ['dynamodb', 's3']."
      }
    }
  }
}